⚫●◽★
——————————————————————
⚫4教育经历
本科和研究生分别在西安理工大学和华南师范大学就读，均就读于计算机专业，目前杭州定居
⚫567实习经历
这是我的三段实习经历，前两段主要和我研究生的课题有关，是有关联邦数据的深度学习，主要内容是使用python和对应领域数据集，参与模型训练。至于今年，我从5月份在咱们公司墨子工作室实习：
一方面使用代码分析相关知识，通过腾讯开源工具Tscancode，学习常用代码分析器原理并参与静态Cpp代码分析需求的个性化定制，
另一方面，熟悉适应公司的工作流。
⚫891011兴趣爱好
我有一个较为深入的爱好是武将设计，参与了许多三国杀diy的交流群和赛事，获得优胜的作品目前有18个，累计设计的技能组已经有上千个了。
和这个爱好相似的，是卡牌游戏设计，目前制作了6个经过试玩检验的卡牌游戏
⚫12个人特长
我一直是三国杀ol的深度玩家，一方面，对全武将技能和规则集了解较深，对三国杀的技能结算也很关注，往近了说比如排位里步度根和潘俊的bug。另一方面，我也经常在社区里写武将使用攻略，也做过一些辅助计算的小工具，比如这个zcp计算器，就是用的dp和pyside做的。这些经历，也是我选择游卡三国杀项目组的原因。

⚫14
项目经历我想介绍一下小球模拟器这个游戏。我们的开发采用以周为单位，差不多分为这四个阶段
在开发阶段，minigame的项目主要还是考虑复用，加上编写实现逻辑

●UI面板
比如，我们游戏中的切球面板
需要一个弹出的UI面板，其中包含所有球类，中间是介绍信息，按TAB启动，按QE切球转盘指针转动到对应位置，按ESC/TAB退出。像这种成体系的需求，会要求策划写一份较为细致的UI文档，罗列所有的功能需求，确保没有歧义和遗漏。
到了开发阶段，我的思路是这样的，
有两个关键点：球型分类和切换效果
我们游戏一共8种球，但在开发的时候这个数字是未知的，需要分类管理，于是我将其分为全部球，可解锁球，已解锁球，只有可解锁球在UI面板中罗列，已解锁球高亮显示。而圆环的角度计算和当前可解锁球的数组长度强绑定，这样后续策划改需求，无论是数量还是种类所属，代码就不需要变化了，项目中需要警惕这种变化，让代码逻辑足够灵活，适应更多可能性。
至于切换效果，当球数量多时，切换并不容易出bug，而已解锁球只有2时，或者在只有1球时就实行无意义的切换，就容易出问题。因此这里使用了循环队列的思想，两倍存储已解锁球并按单倍取余，有效防止边界溢出。
考虑复用也是重要的一方面，QE，TAB，ESC按键在许多场景下都要使用，因此把他们抽象出一个一般父类，面板基类，并且共用逻辑写在父类方法中，例如ESC按键需要检测当前是否有可关闭面板并自动关闭。
配合unity的动画系统，最终我们的切球UI效果就符合预期了

自测
按键有效性

维护
复现粗略锁定，断点和输出信息锁定关键位置，最终发现是切球面板与游戏面板的时间冲突问题，于是通过增加冷却时间解决。
QE频繁同时切球动画错乱。这个问题在修改代码无果后，及时与成员交流，发现是unity动画的问题，使用了分层动画解决

●你的整体思路是什么？为什么这样做，而不是那样做？ 
复用性：需求是可能近似的
可维护性：需求不是一成不变的
●这个项目带给你的收获或成长有哪些？经验教训有哪些？
需求的实现方要训练需求对接方的能力，以实现协作的高效性。A-B，A-C！
开发作为组长，加班时长少进度快，工作量有效。三个游戏系统的复用性，用复用代码搭建多重体验，2h游戏时长。
留有退路，当时在开发足球关时，策划改需求的情况很多，限制碰撞次数，带有AI，自己变成足球这种天马行空的内容，并且不确定要有几关是反逻辑关卡，于是编写代码时采用的方式都是随时可扩展和删除的模式

⚫集训总结


●行动、结果及对团队的贡献
程序【全屏内容】

⚫未来规划
●个人的专长、不足
学习新工具：unity

●期望重点提升项
对项目框架的统筹和理解能力

●对未来工作/职业的规划和展望
更加成熟的项目经验

——————————————————————

⚫实习-游卡
●Check
核心代码检查类，包含项目核心逻辑

●CheckCustom
自定义操作类，封装自定义规则需要的通用操作

●CheckIRecordsetPointerRelease
自定义规则类，实现自定义检查功能
IRecordset* pRecord = new Recordset();

初始时，tok 指向函数的开始标记，通常是函数名。
当 Token::Match(tok, "IRecordset * %var%") 匹配时，tok 指向 IRecordset *。
tok->next()->next() 后，tok 指向变量名 pRecord。
如果 pRecord 是指针，它将被添加到 vars_map 中。
如果后续代码中有 SAFE_RELEASE(pRecord) 或 pRecord->Release()，相应的 Token 将被识别，并且 pRecord 将从 vars_map 中删除。
⚫工具-DP
在函数tryNext中，首先判断i是否等于数组长度，如果等于，则判断curSum是否等于summ，如果等于，则将当前组合添加到solution列表中。

接下来，如果curSum小于等于summ，那么将当前数组中的第i个元素标记为1，然后继续搜索下一层。搜索完成后，将curSum减去当前数组中的第i个元素，继续搜索下一层。

如果curSum大于summ，那么将curSum减去当前数组中的第i个元素，然后将当前数组中的第i个元素标记为0，继续搜索下一层。

最后，将当前数组中的第i个元素标记为0，继续搜索下一层。

需要注意的是，这个算法可能会产生重复的组合，因此需要判断当前组合是否已经在solution列表中。如果不在，则将其添加到solution列表中。
⚫实习-数据
2016.6.30-8.30
◽根据病人基本信息，对发病人群进行统计描述，进行可视化展示
◽建立数学模型研究脑卒中发病率与气温、气压、相对湿度间的关系
◽使用机器学习相关知识完成<脑卒中发病环境因素数据分析>任务，提出预警和干预的建议方案
2022.7.30-2023.7.30
陕西嘉昱盛璟能源科技有限公司
使用联邦隐私计算和宽度网络相关知识，参与能源生产消耗及传输相关大数据的分析挖掘，构建能源预测模型并展示可视化数据分析结果。
